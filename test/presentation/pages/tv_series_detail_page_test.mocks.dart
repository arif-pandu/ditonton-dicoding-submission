// Mocks generated by Mockito 5.3.0 from annotations
// in ditonton/test/presentation/pages/tv_series_detail_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i10;

import 'package:bloc/bloc.dart' as _i11;
import 'package:ditonton/domain/usecases/get_tv_series_detail.dart' as _i2;
import 'package:ditonton/domain/usecases/get_tv_series_recommendation.dart'
    as _i8;
import 'package:ditonton/domain/usecases/get_watchlist_status.dart' as _i4;
import 'package:ditonton/domain/usecases/remove_watchlist.dart' as _i6;
import 'package:ditonton/domain/usecases/save_watchlist.dart' as _i5;
import 'package:ditonton/presentation/bloc/tv_series_detail/tv_series_detail_bloc.dart'
    as _i3;
import 'package:ditonton/presentation/bloc/tv_series_recommendation/tv_series_recommendation_bloc.dart'
    as _i9;
import 'package:ditonton/presentation/bloc/tv_series_watchlist/tv_series_watchlist_bloc.dart'
    as _i7;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGetTvSeriesDetail_0 extends _i1.SmartFake
    implements _i2.GetTvSeriesDetail {
  _FakeGetTvSeriesDetail_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeTvSeriesDetailState_1 extends _i1.SmartFake
    implements _i3.TvSeriesDetailState {
  _FakeTvSeriesDetailState_1(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeGetWatchListStatus_2 extends _i1.SmartFake
    implements _i4.GetWatchListStatus {
  _FakeGetWatchListStatus_2(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeSaveWatchlist_3 extends _i1.SmartFake implements _i5.SaveWatchlist {
  _FakeSaveWatchlist_3(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeRemoveWatchlist_4 extends _i1.SmartFake
    implements _i6.RemoveWatchlist {
  _FakeRemoveWatchlist_4(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeTvSeriesWatchlistState_5 extends _i1.SmartFake
    implements _i7.TvSeriesWatchlistState {
  _FakeTvSeriesWatchlistState_5(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeGetTvSeriesRecommendations_6 extends _i1.SmartFake
    implements _i8.GetTvSeriesRecommendations {
  _FakeGetTvSeriesRecommendations_6(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeTvSeriesRecommendationState_7 extends _i1.SmartFake
    implements _i9.TvSeriesRecommendationState {
  _FakeTvSeriesRecommendationState_7(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [TvSeriesDetailBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockTvSeriesDetailBloc extends _i1.Mock
    implements _i3.TvSeriesDetailBloc {
  MockTvSeriesDetailBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetTvSeriesDetail get getTvSeriesDetail =>
      (super.noSuchMethod(Invocation.getter(#getTvSeriesDetail),
              returnValue: _FakeGetTvSeriesDetail_0(
                  this, Invocation.getter(#getTvSeriesDetail)))
          as _i2.GetTvSeriesDetail);
  @override
  _i3.TvSeriesDetailState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
              returnValue:
                  _FakeTvSeriesDetailState_1(this, Invocation.getter(#state)))
          as _i3.TvSeriesDetailState);
  @override
  _i10.Stream<_i3.TvSeriesDetailState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: _i10.Stream<_i3.TvSeriesDetailState>.empty())
          as _i10.Stream<_i3.TvSeriesDetailState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i3.TvSeriesDetailEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i3.TvSeriesDetailEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i3.TvSeriesDetailState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i3.TvSeriesDetailEvent>(
          _i11.EventHandler<E, _i3.TvSeriesDetailState>? handler,
          {_i11.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i11.Transition<_i3.TvSeriesDetailEvent, _i3.TvSeriesDetailState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i10.Future<void> close() =>
      (super.noSuchMethod(Invocation.method(#close, []),
              returnValue: _i10.Future<void>.value(),
              returnValueForMissingStub: _i10.Future<void>.value())
          as _i10.Future<void>);
  @override
  void onChange(_i11.Change<_i3.TvSeriesDetailState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}

/// A class which mocks [TvSeriesWatchlistBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockTvSeriesWatchlistBloc extends _i1.Mock
    implements _i7.TvSeriesWatchlistBloc {
  MockTvSeriesWatchlistBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.GetWatchListStatus get getWatchListStatus =>
      (super.noSuchMethod(Invocation.getter(#getWatchListStatus),
              returnValue: _FakeGetWatchListStatus_2(
                  this, Invocation.getter(#getWatchListStatus)))
          as _i4.GetWatchListStatus);
  @override
  _i5.SaveWatchlist get saveWatchlist =>
      (super.noSuchMethod(Invocation.getter(#saveWatchlist),
              returnValue:
                  _FakeSaveWatchlist_3(this, Invocation.getter(#saveWatchlist)))
          as _i5.SaveWatchlist);
  @override
  _i6.RemoveWatchlist get removeWatchlist => (super.noSuchMethod(
          Invocation.getter(#removeWatchlist),
          returnValue:
              _FakeRemoveWatchlist_4(this, Invocation.getter(#removeWatchlist)))
      as _i6.RemoveWatchlist);
  @override
  _i7.TvSeriesWatchlistState get state => (super.noSuchMethod(
          Invocation.getter(#state),
          returnValue:
              _FakeTvSeriesWatchlistState_5(this, Invocation.getter(#state)))
      as _i7.TvSeriesWatchlistState);
  @override
  _i10.Stream<_i7.TvSeriesWatchlistState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: _i10.Stream<_i7.TvSeriesWatchlistState>.empty())
          as _i10.Stream<_i7.TvSeriesWatchlistState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i7.TvSeriesWatchlistEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i7.TvSeriesWatchlistEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i7.TvSeriesWatchlistState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i7.TvSeriesWatchlistEvent>(
          _i11.EventHandler<E, _i7.TvSeriesWatchlistState>? handler,
          {_i11.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i11.Transition<_i7.TvSeriesWatchlistEvent,
                  _i7.TvSeriesWatchlistState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i10.Future<void> close() =>
      (super.noSuchMethod(Invocation.method(#close, []),
              returnValue: _i10.Future<void>.value(),
              returnValueForMissingStub: _i10.Future<void>.value())
          as _i10.Future<void>);
  @override
  void onChange(_i11.Change<_i7.TvSeriesWatchlistState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}

/// A class which mocks [TvSeriesRecommendationBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockTvSeriesRecommendationBloc extends _i1.Mock
    implements _i9.TvSeriesRecommendationBloc {
  MockTvSeriesRecommendationBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.GetTvSeriesRecommendations get getTvSeriesRecommendations =>
      (super.noSuchMethod(Invocation.getter(#getTvSeriesRecommendations),
              returnValue: _FakeGetTvSeriesRecommendations_6(
                  this, Invocation.getter(#getTvSeriesRecommendations)))
          as _i8.GetTvSeriesRecommendations);
  @override
  _i9.TvSeriesRecommendationState get state => (super.noSuchMethod(
      Invocation.getter(#state),
      returnValue: _FakeTvSeriesRecommendationState_7(
          this, Invocation.getter(#state))) as _i9.TvSeriesRecommendationState);
  @override
  _i10.Stream<_i9.TvSeriesRecommendationState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: _i10.Stream<_i9.TvSeriesRecommendationState>.empty())
          as _i10.Stream<_i9.TvSeriesRecommendationState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i9.TvSeriesRecommendationEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i9.TvSeriesRecommendationEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i9.TvSeriesRecommendationState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i9.TvSeriesRecommendationEvent>(
          _i11.EventHandler<E, _i9.TvSeriesRecommendationState>? handler,
          {_i11.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i11.Transition<_i9.TvSeriesRecommendationEvent,
                  _i9.TvSeriesRecommendationState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i10.Future<void> close() =>
      (super.noSuchMethod(Invocation.method(#close, []),
              returnValue: _i10.Future<void>.value(),
              returnValueForMissingStub: _i10.Future<void>.value())
          as _i10.Future<void>);
  @override
  void onChange(_i11.Change<_i9.TvSeriesRecommendationState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}
